#!/usr/bin/env perl

=head1 NAME

ipgrep - grep files by CIDR

=head1 SYNOPSIS

    ipgrep [-1cfHhLlnVv] [long options...] [patterns] [files]

=head1 DESCRIPTION

This program will print lines from a file that matches IP4 addresses in the given netblocks.

Many of the options mirror similar options from L<grep>.

=head1 SEE ALSO

L<grep>

=head1 AUTHOR

Robert Rothenberg <rrwo@cpan.org>

=head1 COPYRIGHT AND LICENCE

This software is copyright (c) 2023 by Robert Rothenberg.

This is free software, licensed under The Artistic License 2.0 (GPL Compatible).

=cut

use v5.18;
use warnings;

use Getopt::Long::Descriptive;
use IO::File;
use IO::Uncompress::Gunzip;
use List::Util qw( any );
use Net::CIDR;
use Sub::Quote qw( qsub );

our $VERSION = 'v0.2.0';

my ( $opt, $usage ) = describe_options(
    '%c %o [patterns] [files]',
    [],
    [ 'count|c'                  => 'print a count of matching lines for each input file' ],
    [ 'files-without-match|L'    => 'print the name of each input file from which no output would normally have been printed' ],
    [ 'files-with-match|l'       => 'print the name of each input file from which output would normally have been printed' ],
    [ 'invert-match|v'           => 'invert the sense of matching, to select non-matching lines' ],
    [ 'line-number|n'            => 'prefix each line of output with the line number within its input file' ],
    [ 'match-first-character|1!' => 'match IP address from the first character of the line only' ],
    [
        'filename' => 'hidden' => {
            one_of => [
                [ 'with-filename|H' => 'print the file name for each match' ],
                [ 'no-filename|h'   => 'suppress the prefixing of file names on output' ],
            ]
        }
    ],
    [ 'file|f=s' => 'obtain CIDRs from a file, one per line' ],
    [ 'quiet|silent|q' => 'do not output anything, exit immediately with zero status if any match is found' ],
    [],
    [ 'version|V' => 'print the version and exit' ],
    [ 'help' => 'print usage and exit' ],

);

if ($opt->version) {
    say "iprep ${VERSION}";
}

die $usage if $opt->help;

my @patterns;

if ( my $file = $opt->file ) {

    my $fh = IO::File->new($file);
    while ( my $line = $fh->getline ) {
        chomp($line);
        my $cidr = Net::CIDR::cidrvalidate($line) or next;
        push @patterns, $cidr;
    }
}
else {
    my $pattern = shift @ARGV                       or die $usage;
    my $cidr    = Net::CIDR::cidrvalidate($pattern) or die $usage;
    push @patterns, $cidr;
}

my $re = make_regexp($opt);

my @files = @ARGV;
push @files, "-" unless @files;

unless ( $opt->filename ) {
    $opt->{filename}         = @files > 1 ? "with_filename" : "no_filename";
    $opt->{$_}               = 0 for qw( with_filename no_filename );
    $opt->{ $opt->filename } = 1;
}

my $callback;

unless ( $opt->count ) {
    my $cb_pattern = '$_[2]';
    $cb_pattern = '$_[0]->input_line_number . ":" . ' . $cb_pattern if $opt->line_number;
    $cb_pattern = '$_[1] . ":" . ' . $cb_pattern if $opt->with_filename;
    $callback = qsub 'print ' . $cb_pattern;
}

my $post;
if ( $opt->files_with_match || $opt->files_without_match ) {
    my $pattern = '$_[0]';
    $post = qsub 'say ' . $pattern;
}
elsif ( $opt->count ) {
    my $pattern = '$_[1]';
    $pattern = '$_[0] . ":" . ' . $pattern if $opt->with_filename;
    $post = qsub 'say ' . $pattern;
}

if ( $opt->quiet ) {
    $callback = $post = sub { };
}

my $matched = 0;

for my $file (@files) {

    my $class = $file =~ /\.gz\z/ ? "IO::Uncompress::Gunzip" : "IO::File";
    my $fh    = $class->new($file) or die "$!: $file\n";

    my $count = match_file( $opt, $re, $fh, $file, $callback );
    $matched ||= !!$count;
    exit(0) if $opt->quiet && $matched;
    next if ($opt->files_with_match && !$count) || ($opt->files_without_match && $count);
    $post->( $file, $count ) if $post;

}

exit( $matched ? 0 : 1 );

sub match_file {
    my ( $opt, $re, $fh, $file, $callback ) = @_;
    my $count = 0;
    while ( my $line = <$fh> ) {
        my @ips     = grep defined, map { Net::CIDR::cidrvalidate($_) } ( $line =~ m/${re}/g ) or next;
        my $matched = any { Net::CIDR::cidrlookup( $_, @patterns ) } @ips;
        next unless !!$matched ne !!$opt->invert_match;
        $count++;
        last if $opt->files_with_match || $opt->files_without_match;
        $callback->($fh, $file, $line) if $callback;
    }
    return $count;
}

sub make_regexp {
    my ($opt) = @_;
    # This is based on code from Regexp::Common::net
    my $dec   = q{(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})};
    my $ip4   = "(?:${dec}\.){3}${dec}";
    my $start = $opt->match_first_character ? '^' : '\b';
    my $re    = $start . '(' . $ip4 . ')\b';
    return qr/${re}/;
}
